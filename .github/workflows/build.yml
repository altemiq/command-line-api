name: .NET build

on:
  push:
    branches: 
      - main
    paths-ignore:
      - docs/**
      - .github/workflows/docs.yml
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_MULTILEVEL_LOOKUP: false
  NUGET_XMLDOC_MODE: ''
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  restore:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        lookup-only: true
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Install the .NET workloads
    - if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        config-file: ${{ github.workspace }}/src/nuget.config
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run local/dotnet-restore@v1
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/src
      run: |
        dotnet restore

  run-tests:
    runs-on: ubuntu-latest
    needs: restore

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Install .NET
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        config-file: ${{ github.workspace }}/src/nuget.config
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Test
    - name: Run local/dotnet-test@v1
      id: test
      working-directory: ${{ github.workspace }}/src
      run: >
        dotnet test
        --
        --results-directory ${{ github.workspace }}/coverage/results
        --coverage
        --coverage-output-format cobertura
        
    - uses: actions/upload-artifact@v4
      if: failure() && steps.test.outcome == 'failure'
      with:
        name: TestResults
        path: |
          ${{ github.workspace }}/coverage/results/*.log
        retention-days: 1

    - uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: ${{ github.workspace }}/coverage/results/*.cobertura.xml
        targetdir: '${{ github.workspace }}/coverage/reports'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        verbosity: 'Verbose'

    - name: Run local/set-test-summary@v1
      run: cat '${{ github.workspace }}/coverage/reports/SummaryGithub.md' >> $GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v4
      with:
        name: CoverageReports
        path: ${{ github.workspace }}/coverage/reports
        if-no-files-found: ignore

  create-nuget:
    runs-on: ubuntu-latest
    needs: restore
    
    env:
      Configuration: Release

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # get all history here, for semantic versioning

    - uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Install the .NET workload
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        config-file: ${{ github.workspace }}/src/nuget.config
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run local/dotnet-restore@v1
      working-directory: ${{ github.workspace }}/src
      run: dotnet restore

    - name: Run local/dotnet-build@v1
      working-directory: ${{ github.workspace }}/src
      run: dotnet build --no-restore

    - name: Run local/get-suffix@v1
      id: suffix
      run: |
        suffix=alpha5
        if [ ${{ github.event_name }} == push ];
        then
          suffix=beta5;
        fi

        echo "value=$suffix" >> $GITHUB_OUTPUT

    # Pack
    - name: Run local/dotnet-pack@v1
      working-directory: ${{ github.workspace }}/src
      run: dotnet pack --no-restore --output ${{ github.workspace }}/nupkg -property:ComputeSemanticVersion=true -property:SemanticVersionOutputPath=${{ github.workspace }}/versions -property:SemanticVersionIncrement=ReleaseLabel --version-suffix ${{ steps.suffix.outputs.value }}

    - uses: actions/upload-artifact@v4
      with:
        name: NuPkg
        if-no-files-found: error
        retention-days: 7
        path: ${{ github.workspace }}/nupkg

    - uses: actions/upload-artifact@v4
      with:
        name: Versions
        path: ${{ github.workspace }}/versions

  push:
    runs-on: ubuntu-latest
    needs: [ create-nuget, run-tests ]

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: false

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: NuPkg
        path: ${{ github.workspace }}/nupkg

    - name: Run local/dotnet-nuget-push@v1
      id: push
      working-directory: ${{ github.workspace }}/nupkg
      run: dotnet nuget push *.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
      
    # delete-artifact
    - uses: GeekyEggo/delete-artifact@v5
      if: ${{ steps.push.conclusion == 'success' }}
      with:
        name: NuPkg
